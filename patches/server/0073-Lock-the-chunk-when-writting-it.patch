From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sun, 16 Jan 2022 11:51:16 +1000
Subject: [PATCH] Lock the chunk when writting it


diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
index 41d7d72625e7adfe95ba5b90eb528c4b207b01da..c1b2fbaf037a6b6d9e7a4b539a96fa421065e8f8 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
@@ -1905,6 +1905,7 @@ public final class NewChunkHolder {
             if (unloading) {
                 try {
                     chunk.setUnsaved(false); // MultiPaper - set as saved before serializing
+                    MultiPaper.willSaveChunk(this.world, this.chunkX, this.chunkZ); // MultiPaper
                     final ChunkSerializer.AsyncSaveData asyncSaveData = ChunkSerializer.getAsyncSaveData(this.world, chunk);
 
                     final PrioritisedExecutor.PrioritisedTask task = this.scheduler.loadExecutor.createTask(new AsyncChunkSerializeTask(this.world, chunk, asyncSaveData, this));
@@ -1929,6 +1930,7 @@ public final class NewChunkHolder {
 
             if (unloading) {
                 completing = true;
+                MultiPaper.willSaveChunk(this.world, this.chunkX, this.chunkZ); // MultiPaper
                 this.completeAsyncChunkDataSave(save);
                 LOGGER.info("Successfully serialized chunk data (" + this.chunkX + "," + this.chunkZ + ") in world '" + this.world.getWorld().getName() + "' synchronously");
             } else {
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index abe1dd41aae2195e2635f5fb2b4b6d120e65f7cf..f3d3fbabfc2b866a9262c6666f2054d211225704 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -509,6 +509,10 @@ public class MultiPaper {
         newChunkHolder.hasExternalLockRequest = false;
     }
 
+    public static void willSaveChunk(ServerLevel level, int x, int z) {
+        getConnection().send(new WillSaveChunkLaterMessage(level.getWorld().getName(), x, z));
+    }
+
     public static byte[] nbtToBytes(CompoundTag compoundTag) throws IOException {
         if (compoundTag == null) {
             return new byte[0];
